makeCacheMatrix <- function(x = matrix()) {
}
makeCacheMatrix(10)
makeCacheMatrix()
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if (!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
B <- matrix(c(1,2,3,4),2,2)
B
B1 <- makeCacheMatrix(B)
B1
cacheSolve(B1) #inverse returned after computation
B
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x<<-y
i <<- NULL
}
get <- function(x)
SetInverse <- function(inverse) i <<- inverse
GetInverse <- function() i
list(set = set, get = get, SetInverse = SetInverse, GetInverse = GetInverse)
}
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if (!is.null(i)) {
message("NULL")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1) #inverse returned after computation
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$GetInverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data <- x$get()
i <- inverse(data,...)
x$SetInverse(i)
i
}
cacheSolve(B1)
cacheSolve(B)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$GetInverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data,...)
x$SetInverse(i)
i
}
cacheSolve(B1)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x<<-y
i <<- NULL
}
get <- function(x)
SetInverse <- function(inverse) i <<- inverse
GetInverse <- function() i
list(set = set, get = get, SetInverse = SetInverse, GetInverse = GetInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$GetInverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data,...)
x$SetInverse(i)
i
}
cacheSolve(B1)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$GetInverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$SetInverse(i)
i
}
cacheSolve(B1)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$GetInverse()
if (!is.null(i)){
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$SetInverse(i)
i
}
cacheSolve(B1)
View(B1)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x<<-y
i <<- NULL
}
get <- function(x)
SetInverse <- function(inverse) i <<- inverse
GetInverse <- function() i
list(set = set, get = get, SetInverse = SetInverse, GetInverse = GetInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$GetInverse()
if (!is.null(i)){
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$SetInverse(i)
i
}
cacheSolve(B1)
B1 <- makeCacheMatrix(B)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x<<-y
i <<- NULL
}
get <- function(x)
SetInverse <- function(inverse) i <<- inverse
GetInverse <- function() i
list(set = set, get = get, SetInverse = SetInverse, GetInverse = GetInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$GetInverse()
if (!is.null(i)){
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$SetInverse(i)
i
}
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
makeCacheMatrix <- function(x = matrix()) {
i<-NULL
set<-function(y) {
x<<-y
i<<-NULL
}
get <- function() x
SetInverse <- function(inverse) i <<- inverse
GetInverse <- function() i
list(set = set, get = get, SetInverse = SetInverse, GetInverse = GetInverse)
}
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
makeCacheMatrix <- function(x = matrix()) {
i<-NULL
set<-function(y) {
x<<-y
i<<-NULL
}
get <- function() x
SetInverse<-function(inverse) i<<-inverse
GetInverse<-function() i
list(set=set, get=get, SetInverse=SetInverse, GetInverse=GetInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i<-x$GetInverse()
if (!is.null(i)){
message("getting cached data")
return(i)
}
data<-x$get()
i<-solve(data, ...)
x$SetInverse(i)
i
}
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
mat <- matrix(c(1:9),3,3)
mat
matcache <- makeCacheMatrix(mat)
matcache
matcache2 <- cacheSolve(matcache)
View(matcache)
matcache2
matcache
makeCacheMatrix <- function(x = matrix()) {
i<-NULL
set<-function(y) {
x<<-y
i<<-NULL
}
get <- function() x
SetInverse<-function(inverse) i<<-inverse
GetInverse<-function() i
list(set=set, get=get, SetInverse=SetInverse, GetInverse=GetInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i<-x$GetInverse()
if (!is.null(i)){
message("getting cached data")
return(i)
}
data<-x$get()
i<-solve(data, ...)
x$SetInverse(i)
i
}
mat <- matrix(c(1:9),3,3)
matcache <- makeCacheMatrix(mat)
matcache2 <- cacheSolve(matcache)
B <- matrix(c(1,2,3,4),2,2)
b1 <- makeMethodsList(B)
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1) #inverse returned after computation
B <- matrix(c(1:16),4,4)
B1 <- makeCacheMatrix(B)
cacheSolve(B1) #inverse returned after computation
B <- matrix(c(1:16),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1) #inverse returned after computation
B <- matrix(c(1:16),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1) #inverse returned after computation
B <- matrix(c(1:32),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1) #inverse returned after computation
B <- matrix(c(1:10),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1) #inverse returned after computation
B1
solve(B)
B <- matrix(c(1:10),2,2)
solve(B)
B <- matrix(c(1:9),3,3)
solve(B)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i<-x$GetInverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data<-x$get()
i<-solve(data, ...)
x$SetInverse(i)
i
}
cacheSolve(b1)
cacheSolve(B1)
